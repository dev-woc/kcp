// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  email         String        @unique
  password      String
  name          String
  phone         String
  role          String        @default("user") // "user" or "admin"

  // Strava integration
  stravaAthleteId    String?   // Strava athlete ID
  stravaAccessToken  String?   // Current access token
  stravaRefreshToken String?   // Refresh token for getting new access tokens
  stravaTokenExpiry  DateTime? // When the access token expires
  stravaConnectedAt  DateTime? // When user connected Strava

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  applications  Application[]
  sessions      Session[]
  activities    Activity[]

  @@index([stravaAthleteId])
}

model Application {
  id                        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId                    String   @db.ObjectId
  user                      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Form fields
  consentAccepted           Boolean  @default(false) // User must accept consent form
  consentAcceptedAt         DateTime? // When user accepted consent
  fullName                  String
  email                     String
  phone                     String
  dateOfBirth               String
  cityState                 String
  therapyExperience         String   // "Yes" or "No"
  hasInsurance              String   // "Yes" or "No"
  currentChallenges         String[] // Array of selected challenges
  testimonialWillingness    String   // "Yes" or "No"
  mentalHealthDescription   String
  therapyReason             String
  therapyGoals              String
  weeklyAvailability        String   // "Yes" or "No"
  hasDevice                 String   // "Yes" or "No"
  therapyBarriers           String
  introVideoUrl             String?  // URL to the uploaded intro video

  // Therapist preference
  therapistPreference       String   // "choose_own" or "foundation_help"
  preferredTherapistName    String?  // Optional: if choosing own therapist
  preferredTherapistContact String?  // Optional: contact info for preferred therapist

  // Application metadata
  status                    String   @default("pending") // "pending", "reviewing", "approved", "rejected"
  submittedAt               DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  @@index([userId])
  @@index([status])
}

model Session {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Session details
  checkInTime     DateTime @default(now())
  sessionNumber   Int      // Which session number (1, 2, 3, 4 for the month)
  notes           String?  // Optional notes from user

  // Admin tracking
  therapistName   String?  // Name of therapist for this session
  adminNotes      String?  // Admin notes about the session
  verified        Boolean  @default(false) // Admin can verify the session occurred

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
  @@index([checkInTime])
}

model Therapist {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String   @unique
  phone           String
  specialization  String   // Areas of expertise
  licenseNumber   String?  // Optional license number
  bio             String?  // Optional bio/description
  isActive        Boolean  @default(true) // Enable/disable therapist
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([isActive])
}

model Activity {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  userId            String   @db.ObjectId
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Strava activity data
  stravaActivityId  String   @unique // Strava's activity ID
  activityType      String   // "Ride", "Run", etc.
  name              String   // Activity name from Strava
  distance          Float    // Distance in meters
  movingTime        Int      // Moving time in seconds
  elapsedTime       Int      // Elapsed time in seconds
  totalElevationGain Float   // Elevation gain in meters
  startDate         DateTime // When the activity started
  averageSpeed      Float?   // Average speed in m/s
  maxSpeed          Float?   // Max speed in m/s

  // KPF specific
  isWednesdayRide   Boolean  @default(false) // Is this a KPF Wednesday ride?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
  @@index([startDate])
  @@index([isWednesdayRide])
}
